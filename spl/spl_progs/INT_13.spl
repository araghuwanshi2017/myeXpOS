// ******************************** INTERRUPT 13 (SEMAPHORE SYSTEM CALL) *******************************

alias UserSP R0;
alias sys_Call_Num R1;
alias current_PID R2;
alias process_Table_Entry R6;
alias Return_Value R7;


UserSP = SP;
sys_Call_Num = [[PTBR +2 * ((UserSP - 5)/512)] * 512 + (UserSP - 5) % 512]; //Extracting System_Call_Number
current_PID = [SYSTEM_STATUS_TABLE + 1];
process_Table_Entry = PROCESS_TABLE + current_PID * 16;
Return_Value = [PTBR +2 * ((UserSP - 1)/512)] * 512 + (UserSP - 1) % 512;

[process_Table_Entry + 13] = SP;            // Saving User_Stack UPTR
SP = [process_Table_Entry + 11] * 512 - 1; //Switch to Kernel_Stack (KPTR)
[process_Table_Entry + 9] = sys_Call_Num;           // Setting Mode_Flag equal to System_Call_Number

backup;

// *** Semget_System_Call ***

if(R1 == 17) then

	// Base Pointer Of Per_Process_Resource_Table
	alias Base_RT R4;
	alias cnt R5;

	Base_RT = ([process_Table_Entry + 11] + 1) * 512 - 16;
	cnt = 0;

// *** Finding Index Of Free Entry ***
	while(cnt < 16) do
		if([Base_RT + cnt] == -1) then // If Found a Free_Entry
			break;
		endif;
		cnt = cnt + 2;
	endwhile;

	if(cnt == 16) then
		[Return_Value] = -1;            // If Not Free_Entry Available in the Resource_Table
		[process_Table_Entry + 9] = 0; // Resetting the Mode_Flag to 0;
		restore;
		SP = R0;
		
		ireturn ;
	endif;
	
// Setting Up the Free Entry of Per_Process_Resource_Table
	[Base_RT + cnt] = 1; // 1 Indicating that Resource is a Semaphore
	
// Storing The Required Values

	backup;
	R1 = ACQUIRE_SEMAPHORE; // Func_Number For Acquiring a semaphore is 6
	R2 = R2; // Current_PID
	call MOD_0; //Calling Process_Manager_Module to Acquire a Semaphore

	if(R0 == -1) then
		restore;	
		[Return_Value] = -2; // If there are no Free_Semaphores
		[process_Table_Entry + 9] = 0;// Switching Back To USer_Mode
		restore;
		SP = UserSP;
		ireturn;
	endif;
	
	[Base_RT + cnt + 1] = R0; //Stored the Index of Semaphore_Table_Entry

	restore;

// ****
	// Semaphore_Descriptor
	[Return_Value] = cnt/2; // Per_Process_Resource_Table Entry_Index
	
	[PROCESS_TABLE + R2 * 16 + 9] = 0; //Switching Back to User_Mode
	
	restore;
	SP = UserSP;
	ireturn ;
endif;

// ****

// *** SemRelease System_Call ***
 
if(R1 == 18) then
	
	alias Sem_D R3;
	alias Base_RT R4;
	
	Sem_D = [[PTBR + 2 * ((UserSP - 4)/512)] * 512 + (UserSP - 4) % 512];
	Base_RT = ([process_Table_Entry + 11] + 1)* 512 - 16;

	if(Sem_D < 0 || Sem_D > 7 || [Base_RT + 2 * Sem_D] != 1) then
		
        restore;
		 SP = R0;						 //Switching to User_Stack
		[Return_Value] = -1;            // Invalid_Entry
        [process_Table_Entry + 9] = 0; // Resetting the Mode_Flag to 0;
        ireturn ;
	endif;
	
	backup;
	R1 = RELEASE_SEMAPHORE;            // Func_Number for Releasing a Semaphore
	R2 = R2;                          // Current_PID
	R3 = [Base_RT + 2 * Sem_D + 1];  // Semaphore_Table_Index
	call MOD_0;                     // Calling Resource_Manager_Module
	restore;

// Invalidating Per_Process_Resource_Table Entry
	[Base_RT + 2 * Sem_D] = -1;

	[process_Table_Entry + 9] = 0; //Switching Back to User_Mode 
	restore;

	SP = UserSP;
	ireturn ;

endif;
// **** 
		


	
