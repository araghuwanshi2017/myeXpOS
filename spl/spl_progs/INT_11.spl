// ****************************** INTERRUPT 11 (SIGNAL SYSTEM CALLS) *******************************

// ******************** (FINAL VERSION) ********************
alias UserSP R0;
alias sys_Call_Num R1;
alias wait_PID R2;
alias current_PID R3;
alias process_Table_Entry R5;
alias Return_Value R6;

UserSP = SP;
sys_Call_Num = [[PTBR + 2 * ((UserSP - 5)/512)] * 512 + (UserSP - 5) % 512];
wait_PID = [[PTBR +2 * ((UserSP - 4)/512)] * 512 + (UserSP - 4) % 512];
current_PID = [SYSTEM_STATUS_TABLE + 1];
process_Table_Entry = PROCESS_TABLE + current_PID * 16;
Return_Value = [PTBR + 2 * ((UserSP - 1)/512)] * 512 + (UserSP - 1) % 512;

[process_Table_Entry + 13] = SP;            // Saving UPTR
SP = [process_Table_Entry + 11] * 512 - 1; // Saving UPTR
[process_Table_Entry + 9] = sys_Call_Num; // Setting  Mode_Flag Equal to System_Call_Number

backup;

// *** Wait_System_Call ***

if(R1 == 13) then
	if((current_PID == wait_PID) || ([process_Table_Entry + 4] == TERMINATED) || (wait_PID < 1 && wait_PID > MAX_PROC_NUM)) then
		[Return_Value] = -1;                // Return Value as Failure
		[process_Table_Entry + 9] = 0;     // Resetting Mode_Flag to 0
		restore;                          //
		SP = [process_Table_Entry + 13]; // Switch to User_Stack 
		ireturn ;
	endif;
	
	[process_Table_Entry + 4] = WAIT_PROCESS; //State changed to Wait
	[process_Table_Entry + 5] = wait_PID; //  Current Process Waiting for wait_PID

	backup;
	call MOD_5;
	restore;
	
	[process_Table_Entry + 9] = 0; // Resetting Mode_Flag to 0
	[Return_Value] = 0; // Return Value as Success
	
	restore;

	SP = UserSP;
	ireturn;	
endif;

// ****

// ***  Signal_System_Call ***

if(R1 == 14) then
	
	alias i R4;
	i = 1;
	while(i < 16) do
		if(([PROCESS_TABLE + i * 16 + 4] == WAIT_PROCESS) && ([PROCESS_TABLE + i * 16 + 5] == R3)) then
			[PROCESS_TABLE + i * 16 + 4] = READY;
		endif;
		i = i + 1;
	endwhile;
	
	[process_Table_Entry + 9] = 0; // Resetting Mode_Flag to 0
	[Return_Value] = 0; // Return Value as Success
	
	restore;

	SP = UserSP;
	ireturn;
endif;

// ****

// *** GetPID ***

if(R1 == 11) then
	[Return_Value] = R3; // Return Value as PID of the Current_Process
	
	restore;
	
	SP = UserSP;
	ireturn;
endif;

// ****


// *** GetPPID ***

if(R1 == 12) then
	[Return_Value] = [process_Table_Entry + 2]; // Return Value as PID of Parent_Process
	
	restore;

	SP = UserSP;
	ireturn;
endif;

// ****

ireturn ;

// *****************_________________****************