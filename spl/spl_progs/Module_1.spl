//Function Number	 Function Name	        Arguments	Return Value
//GET_PCB_ENTRY = 1	 Get Pcb Entry	        NIL	        Index of Free PCB
//FREE_USER_AREA_PAGE=2  Free User Area Page	PID	        NIL
//EXIT_PROCESS = 3	 Exit Process	        PID	        NIL
//FREE_PAGE_TABLE = 4	 Free Page Table        PID	        NIL
//KILL_ALL = 5	         Kill All               PID     	NIL 

// ************************* MODULE 1 (PROCESS_MANAGER_MODULE) **************************

alias func_Num R1;
alias currentPID R2;
alias page_Table_Entry R5;

if(R1 == GET_PCB_ENTRY) then
	alias i R0;
	i = 0;
	while(i < 16) do
		if([PROCESS_TABLE + i * 16 + 4] == TERMINATED) then
			[PROCESS_TABLE + i * 16 + 14] = PAGE_TABLE_BASE + i * 20;
			[PROCESS_TABLE + i * 16 + 15] = 10;
			[PROCESS_TABLE + i * 16 + 4] = ALLOCATED;
			[PROCESS_TABLE + i * 16 + 1] = i;
			return;
		endif;
		i = i + 1;
	endwhile;

	R0 = -1;
	return;
endif;
	
if(R1 == FREE_USER_AREA_PAGE) then
	backup;
	alias Base_RT R4;
		Base_RT = ([PROCESS_TABLE + currentPID * 16 + 11] + 1)* 512 - 16; // Base_Entry Of Per_Process_Resource_Table
	
	alias i R3;
	i = 0;
	while(i < 16) do
		if([Base_RT + i] != -1) then
			if([Base_RT + i] == FILE) then
				backup;
				R1 = CLOSE;
				R2 = [Base_RT + i + 1];
				call MOD_3;
				restore;
			endif; 
			if([Base_RT + i] == SEMAPHORE) then
				backup;
				R1 = RELEASE_SEMAPHORE;
				R2 = currentPID;		
				R3 = [Base_RT + i + 1]; //Sem_ID
				call MOD_0;
				restore;
			endif;
		endif;
		i = i + 2;
	endwhile;

// *** Invoke Release Page ***
	backup;
	R1 = 2; //Func Number For Release Page
	R2 = [PROCESS_TABLE + (currentPID * 16) + 11];
	call MOD_2;
	restore;

// ****
	restore;
	return;
endif;

// *** EXIT_PROCESS ***
if(R1 == EXIT_PROCESS) then

	if([PROCESS_TABLE + R2 * 16 + 9] != 9) then

		alias i R3;
		i = 1;
		while( i < 16) do
			if(([PROCESS_TABLE + i * 16 + 4] ==  WAIT_PROCESS) && ([PROCESS_TABLE + i * 16 + 5] == R2)) then
				[PROCESS_TABLE + i * 16 + 4] = READY;        // Stage Changed to Ready as the Process is Terminating
				if([PROCESS_TABLE + i * 16 + 2] == R2) then
					[PROCESS_TABLE + i * 16 + 2] = -1;     // Orphan_Process
				endif;
			endif;
			i = i + 1;
		endwhile;
	endif;
			
// *** Invoke Free Page Table ***

	backup;
	R1 = 4; //Func Number For Free Page Table
	R2 = currentPID; // PID
	call MOD_1;
	restore;

// ****

// *** Invoke Free User Area Page ***

breakpoint;

	backup;
	R1 = 2;           // Func Number For Free User Area Page
	R2 = currentPID; //PID
	call MOD_1;     //Calling PMM
	restore;
	
// ****
	[PROCESS_TABLE + (currentPID * 16) + 4] = TERMINATED;	
	return;

endif;

// ****

// *** FREE_PAGE_TABLE ***
if(R1 == FREE_PAGE_TABLE) then
	backup;
	page_Table_Entry = PAGE_TABLE_BASE + (currentPID * 20);
	
// Invalidating Library
	[page_Table_Entry + 0] = -1;    
	[page_Table_Entry + 1] = "0000"; // Auxillary Bits
	[page_Table_Entry + 2] = -1;
	[page_Table_Entry + 3] = "0000";


// Invalidating Stack , Heap and Code_Pages
	alias i R3;
	i = 4;
	while(i <= 18) do
		if([page_Table_Entry + i] != -1) then // For Valid Page
			backup;
	
			R1 = 2;                         // Release_Page
			R2 = [page_Table_Entry + i];   //Page_Num
			call MOD_2;					  //Calling MMM
			[page_Table_Entry + i] = -1; //Invalidating Entries
			[page_Table_Entry + i + 1] = "0000";
			
			restore;
		endif;
		i = i + 2;
	endwhile;

	restore;

// ****

// *** Invalidating Heap and Stack Entries From DISK_MAP_TABLE ***

// *** Heap ***

	if([DISK_MAP_TABLE + (currentPID * 10) + 2] != -1) then
		backup;
		R1 = 4;                                           //Func_Num for RELEASE_BLOCK
		R3 = [DISK_MAP_TABLE + (currentPID * 10) + 2];   //BLOCK_NUMBER
		R6 = [SYSTEM_STATUS_TABLE + 1];                 //PID
		call MOD_2;                                    //Memory_Manager
		restore;
	endif;
	
	if([DISK_MAP_TABLE + (currentPID * 10) + 3] != -1) then
                backup;
                R1 = 4;                                         // Func_Num for RELEASE_BLOCK
                R3 = [DISK_MAP_TABLE + (currentPID * 10) + 3]; //BLOCK_NUMBER
                R6 = currentPID;                              // PID
                call MOD_2;                                  // Memory_Manager
                restore;
        endif;

// ***** 

// *** Stack *** 

	if([DISK_MAP_TABLE + (currentPID * 10) + 8] != -1) then
                backup;
                R1 = 4;                                           // Func_Num for RELEASE_BLOCK
                R3 = [DISK_MAP_TABLE + (currentPID * 10) + 8];   //BLOCK_NUMBER
                R6 = currentPID;                                // PID
                call MOD_2;                                    // Memory_Manager
                restore;
        endif;

	if([DISK_MAP_TABLE + (currentPID * 10) + 9] != -1) then
                backup;
                R1 = 4;                                          // Func_Num for RELEASE_BLOCK
                R3 = [DISK_MAP_TABLE + (currentPID * 10) + 9];  //BLOCK_NUMBER
                R6 = currentPID;                               // PID
                call MOD_2;                                   // Memory_Manager
                restore;
        endif;

// ****

// Invalidate *** DISK_MAP_TABLE ***
	alias counter R3;
	counter = 0;
	while(counter < 10) do
		[DISK_MAP_TABLE + (currentPID * 10) + counter] = -1;
		counter = counter + 1;
	endwhile;
	return ;
endif;

// ****

// *** KILL_ALL (Final_Version) ***

if(R1 == KILL_ALL) then
	
	alias i R3;
	alias inode_Table_Entry R4;
		
	i = 1;

	while(i < 60) do
		inode_Table_Entry = INODE_TABLE + i * 16;
		if([inode_Table_Entry + 1] == -1) then	
			break;
		endif;

		backup;
		R1 = ACQUIRE_INODE; //Func_Num
		R2 = currentPID;   // PID
		R4 = i;           // Inode_Index
		call MOD_0;      //Calling RMMs
		restore;

		i = i + 1;

	endwhile;

	i = 2;
	while(i < 16) do
		if(i != currentPID) then
			backup;
			R1 = EXIT_PROCESS ; //Fuc_Num
			R2 = i;            //PID
			call MOD_1;       //Calling PMM
			restore;
		endif;

		i = i + 1;

	endwhile;

	i = 1;
	while(i < 60) do
		inode_Table_Entry = INODE_TABLE + i * 16;
		
		if([inode_Table_Entry + 1] == -1) then	
			break;
		endif;

		backup;
		R1 = RELEASE_INODE; //Func_Num
		R2 = currentPID;   // PID
		R4 = i;           // Inode_Index
		call MOD_0;      //Calling RMMs
		restore;

		i = i + 1;

	endwhile;

	return ;
endif;

// ****

// *****************________________******************
