
//*********************************** MODULE 7 (BOOT MODULE)***************************************

// *** Disk To Memory Loading ***

// *** Exception Handler ***
loadi(2, 15);
loadi(3, 16);

// *** Load Timer Interrupt ***
loadi(4 , 17);
loadi(5 , 18);

// *** Load Disk Interrupt ***
loadi(6 , 19);
loadi(7 , 20);

// *** Load Console Interrupt ***
loadi(8 , 21);
loadi(9 , 22);

// *** Load Interrupt From Disk To Memory INT [4 - 18] ***

// *** Load INT 4 ***
loadi(10 , 23);
loadi(11 , 24);

// *** Load INT 5 ***
loadi(12 , 25);
loadi(13 , 26);

// *** Load INT 6 ***
loadi(14 , 27);
loadi(15 , 28);

// *** Load INT 7 ***
loadi(16, 29);
loadi(17, 30);

// *** Load INT 8 ***
loadi(18 , 31);
loadi(19 , 32);

// *** Load INT 9 ***
loadi(20 , 33);
loadi(21 , 34);

// *** Load INT 10 ***
loadi(22 , 35);
loadi(23 , 36);

// *** Load INT 11 ***
loadi(24 , 37);
loadi(25 , 38);

// *** Load INT 12 ***
loadi(26 , 39);
loadi(27 , 40);

// *** Load INT 13 ***
loadi(28 , 41);
loadi(29 , 42);

// *** Load INT 14 ***
loadi(30 , 43);
loadi(31 , 44);

// *** Load INT 15 ***
loadi(32 , 45);
loadi(33 , 46);

// *** Load INT 16 ***
loadi(34 , 47);
loadi(35 , 48);

// *** Load INT 17 ***
loadi(36 , 49);
loadi(37 , 50);

//**********

// *** Load Modules From Disk To Memory MOD [0 - 7] ***

// Module 0 (Resource_Manager) ***
loadi(40 , 53);
loadi(41 , 54);

// Module 1 (Process_Manager) ***
loadi(42 , 55);
loadi(43 , 56);

// Module 2 (Memory_Manager) ***
loadi(44 , 57);
loadi(45 , 58);

// Module 3 (File Manager) ***
loadi(46 , 59);
loadi(47 , 60);

// Module 4 (Device Manager) ***
loadi(48 , 61);
loadi(49 , 62);

// **********

// *** Load Inode_Table ***
loadi(59 , 3);
loadi(60 , 4);

// *** Disk_Free_List  and Root_File***
	
loadi(61 , 2);
loadi(62 , 5);

// *** Library Load ***
loadi(63 , 13);
loadi(64 , 14);

// *** Init/Login ***
loadi(65 , 7);

// *** Shell ***
loadi(67 , 9);
loadi(68 , 10);

// *******  Loading Done  *********

// *** Initialization of Init_Process  ***

PTBR = PAGE_TABLE_BASE + 20;
PTLR = 10;

//Library
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";


//Heap
[PTBR + 4] = -1;
[PTBR + 5] = "0000";
[PTBR + 6] = -1;
[PTBR + 7] = "0000";


//Code
[PTBR + 8] = 65;
[PTBR + 9] = "0100";
[PTBR + 10] = -1;
[PTBR + 11] = "0000";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";

//Stack
[PTBR + 16] = 66;
[PTBR + 17] = "0110";
[PTBR + 18] = -1;
[PTBR + 19] = "0110";


//INIT Process Ist
[66 * 512] = [65 * 512 + 1];

[PROCESS_TABLE  + 16 + 1] = 1;
[PROCESS_TABLE  + 16 + 3] = 1; //User_Id
[PROCESS_TABLE  + 16 + 4] = CREATED;
[PROCESS_TABLE  + 16 + 11] = 77;
[PROCESS_TABLE  + 16 + 12] = 0;
[PROCESS_TABLE  + 16 + 13] = 8*512;
[PROCESS_TABLE  + 16 + 14] = PAGE_TABLE_BASE + 20;
[PROCESS_TABLE  + 16 + 15] = 10;

// ****

// *** Initialization of Shell_Process  ***

PTBR = PAGE_TABLE_BASE + 40;
PTLR = 10;

//Library
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";


//Heap
[PTBR + 4] = -1;
[PTBR + 5] = "0000";
[PTBR + 6] = -1;
[PTBR + 7] = "0000";


//Code
[PTBR + 8] = 67;
[PTBR + 9] = "0100";
[PTBR + 10] = 68;
[PTBR + 11] = "0100";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";

//Stack
[PTBR + 16] = 78;
[PTBR + 17] = "0110";
[PTBR + 18] = 79;
[PTBR + 19] = "0110";


//INIT Process Ist
[78 * 512] = [67 * 512 + 1];

[PROCESS_TABLE  + 32 + 1] = 2;   //PID
[PROCESS_TABLE  + 32 + 2] = 1;  // PPID
[PROCESS_TABLE  + 32 + 3] = 1; //User_Id
[PROCESS_TABLE  + 32 + 4] = TERMINATED;
[PROCESS_TABLE  + 32 + 11] = 80;
[PROCESS_TABLE  + 32 + 12] = 0;
[PROCESS_TABLE  + 32 + 13] = 8*512;
[PROCESS_TABLE  + 32 + 14] = PAGE_TABLE_BASE + 40;
[PROCESS_TABLE  + 32 + 15] = 10;

// ****

// *** Setting all the processes as TERMINATED except Idle and Init
alias counter R0;
counter = 3;
while(counter <= 15) do
	[PROCESS_TABLE + counter * 16 + 4] = TERMINATED;
	counter = counter + 1;
endwhile;

// ****

// *** Used_Pages ***

counter = 0;
while(counter < 81) do
		[MEMORY_FREE_LIST + counter] = 1;
	counter = counter + 1;
endwhile;

// ****

// *** Free_Pages ***

counter = 81;
while(counter <= 127) do
	[MEMORY_FREE_LIST + counter] = 0;
	counter = counter + 1;
endwhile;

// *** Initial all resources are free ***

[TERMINAL_STATUS_TABLE] = 0; // Setting Terminal Free
[DISK_STATUS_TABLE] = 0;

// ****

[SYSTEM_STATUS_TABLE + 2] = 47; // MEM_FREE_COUNT
[SYSTEM_STATUS_TABLE + 3] = 0; //  WAIT_FREE_COUNT

// *** Initialization of Per_Process_Resource_Table for Shell ***

counter = 81 * 512 - 16;

alias cnt R1;
cnt = 0;

while(cnt < 16) do
	[counter + cnt] = -1;
	cnt = cnt + 1;
endwhile;

// ****

// *** Initialization of DISK_MAP_TABLE ***
	counter = 4;
	cnt = 2;
	alias currentPID  R2;
	currentPID = 2;
	while(cnt < 10) do
		[DISK_MAP_TABLE + (currentPID * 10) + cnt] = -1;
		counter = counter + 2;	
		cnt = cnt + 1;
	endwhile;

	[DISK_MAP_TABLE + currentPID * 10 + 4] = 9;
	[DISK_MAP_TABLE + currentPID * 10 + 5] = 10;

// ****

// *** Initialization of Semaphore_Table ***

	counter = 0;
	while(counter < 128) do
		[SEMAPHORE_TABLE + counter] = -1;  //Setting Locking_PID as -1
		[SEMAPHORE_TABLE + counter + 1] = 0; // Initializing Process_Count as 0
		counter = counter + 4;
	endwhile;

// ****

// *** Initialization of File_Status_Table ***

	counter = 0;
	while(counter < 60) do
		[FILE_STATUS_TABLE + counter * 4] = -1;  //Setting Locking_PID as -1
		[FILE_STATUS_TABLE + counter * 4 + 1] = -1; // Initializing File_Open_Count as -1
		counter = counter + 1;
	endwhile;

// ****

// *** Initialization of Buffer_Table ***

	counter = 0;
	while(counter < 16) do
		[BUFFER_TABLE + counter] = -1;  //Setting Block_Number as -1
		[BUFFER_TABLE + counter + 1] = 0; // Initializing Dirty_Bit as 0 
		[BUFFER_TABLE + counter + 2] = -1; // Initializing Locking_PID as -1
		counter = counter + 4;
	endwhile;

// ****

// *** Initialization of Open_File_table ***

	counter = 0;
	while(counter < MAX_OPENFILE_NUM) do	
		[OPEN_FILE_TABLE + counter * 4] = -1; //Setting Inode_Index as -1
		[OPEN_FILE_TABLE + counter * 4 + 1] = 0; //Initializing Open_Instance_Count to 0
		
		counter = counter + 1;
	endwhile;
// ****
	

return;
	
// *********__________*********
