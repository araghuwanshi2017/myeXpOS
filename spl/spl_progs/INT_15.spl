// ************************** INTERRUPT 15 (SHUTDOWN SYSTEM CALL) ************************

alias UserSP R0;
	UserSP = SP;

alias sys_Call_Number R1;
	sys_Call_Number = [[PTBR + 2 * ((UserSP - 5)/512)] + (UserSP - 5) % 512];

alias currentPID R2;
	currentPID = [SYSTEM_STATUS_TABLE + 1];

// Setting the Mode_Flag equal to System_Call_Number
[PROCESS_TABLE + currentPID * 16 + 9] = sys_Call_Number;

//Saving User_Stack (UPTR)
[PROCESS_TABLE + currentPID * 16 + 13] = SP;

//Switching to Kernel_Stack (KPTR)
SP = [PROCESS_TABLE + currentPID * 16 + 11] * 512 - 1;

// If Current_Process is Not Root_User
	if([PROCESS_TABLE + currentPID * 16 + 3] != 1) then
		if(currentPID != 1) then
			[[PTBR + 2 * ((UserSP - 1)/512)] * 512 + (UserSP - 1) % 512] = -1;
			[PROCESS_TABLE + currentPID * 16 + 9] = 0;
			SP = UserSP;
			ireturn ;

		endif;
	endif;

// *** Memory_Copies Of The Inode_Table ***

		backup;
		R1 = DISK_STORE;
		R2 = currentPID;
		R4 = 59; // Page_Number;
		R5 = 3; // Block_Number;
		call MOD_4;
		restore;

		backup;
		R1 = DISK_STORE;
		R2 = currentPID;
		R4 = 60; // Page_Number;
		R5 = 4; // Block_Number;
		call MOD_4;
		restore;
// ****

// *** Memory_Copies Of The Root_File ***

		backup;
		R1 = DISK_STORE;
		R2 = currentPID;
		R4 = 62; // Page_Number;
		R5 = 5; // Block_Number;
		call MOD_4;
		restore;

// ****

// *** Memory_Copies Of The Disk_Free_List ***

		backup;
		R1 = DISK_STORE;
		R2 = currentPID;
		R4 = 61; // Page_Number;
		R5 = 2; // Block_Number;
		call MOD_4;
		restore;
// ****

halt;

// ***********_____________*************

